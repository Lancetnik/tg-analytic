services:
  es:
    image: elasticsearch:7.14.2
    container_name: es-container
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
      - node.name=es01
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    networks:
      - app-net
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data_es:/usr/share/elasticsearch/data
    ports:
      - 9200:9200

  postgres:
    image: postgres:14
    container_name: tg-analytic-pg
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_USER: user
      POSTGRES_DB: db
    volumes:
      - data_pg:/var/lib/postgresql/data
    ports:
      - 5433:5432
    networks:
      - app-net

  minio:
    image: 'bitnami/minio:2022.4.1-debian-10-r5'
    container_name: tg-analytic-minio
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      - MINIO_ROOT_USER=user
      - MINIO_ROOT_PASSWORD=password
      - MINIO_SCHEME=http
    volumes:
      - minio-storage:/data
    networks:
      - app-net

  kibana:
    image: kibana:7.14.2
    container_name: tg-analytic-kibana
    networks:
      - app-net
    environment:
      - ELASTICSEARCH_HOSTS=http://es-container:9200
    depends_on:
      - es
    ports:
      - 5601:5601

  redis:
    image: redis:5
    container_name: tg-analytic-redis
    ports:
      - 6379:6379
    networks:
      - app-net

  sockets:
    build: ./websockets
    container_name: tg-analytic-sockets
    volumes:
      - ./websockets/app:/code
    networks:
      - app-net
    ports:
      - 8001:8001
      - 8002:8002
    command: venv/bin/uvicorn serve:app --host 0.0.0.0 --port 8001
  
  postgres-auth:
    image: postgres:14
    container_name: tg-analytic-pg-auth
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_USER: user
      POSTGRES_DB: db
    volumes:
      - data_pg_auth:/var/lib/postgresql/data
    ports:
      - 5434:5432
    networks:
      - app-net

  auth:
    build: ./auth
    container_name: tg-analytic-auth
    volumes:
      - ./auth/app:/code
    networks:
      - app-net
    depends_on:
      - postgres-auth
    environment:
      POSTGRES_HOST: tg-analytic-pg-auth
      POSTGRES_PORT: 5432
    ports:
      - 8003:8003
      - 8004:8004
    command: venv/bin/gunicorn serve:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:8003

  app:
    build: ./backend
    container_name: tg-analytic
    volumes:
      - ./backend/app:/code
    networks:
      - app-net
    depends_on:
      - redis
      - es
      - minio
      - postgres
    environment:
      REDIS_HOST: tg-analytic-redis
      MINIO_HOST: tg-analytic-minio
      ELASTIC_HOST: es-container
      WEBSOCKETS_HOST: tg-analytic-sockets
      WEBSOCKETS_PORT: 8002
      AUTH_HOST: tg-analytic-auth
      AUTH_PORT: 8004
      POSTGRES_HOST: tg-analytic-pg
      POSTGRES_PORT: 5432
    ports:
      - 8000:8000
    command: venv/bin/gunicorn serve:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000

  celery:
    build: ./backend
    container_name: tg-analytic-celery
    volumes:
      - ./backend/app:/code
    networks:
      - app-net
    depends_on:
      - redis
      - es
      - minio
      - postgres
    environment:
      REDIS_HOST: tg-analytic-redis
      MINIO_HOST: tg-analytic-minio
      ELASTIC_HOST: es-container
      WEBSOCKETS_HOST: tg-analytic-sockets
      WEBSOCKETS_PORT: 8002
      AUTH_HOST: tg-analytic-auth
      AUTH_PORT: 8004
      POSTGRES_HOST: tg-analytic-pg
      POSTGRES_PORT: 5432
    command: venv/bin/celery -A worker.celery worker -l info

  flower:
    build: ./backend
    container_name: tg-analytic-celery-flower
    volumes:
      - ./backend/app:/code
    ports:
      - 5555:5555
    networks:
      - app-net
    environment:
      REDIS_HOST: tg-analytic-redis
    depends_on:
      - celery
      - redis
    command: venv/bin/celery -A worker.celery flower
  
  prometheus:
    image: prom/prometheus:v2.35.0-rc0
    container_name: tg-analytic-prometheus
    networks:
      - app-net
    depends_on:
      - flower
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
  
  grafana:
    image: grafana/grafana:8.4.6-ubuntu
    container_name: tg-analytic-grafana
    networks:
      - app-net
    depends_on:
      - prometheus
    ports:
      - 3000:3000

volumes:
  data_es:
    driver: local
  data_pg:
    driver: local
  minio-storage:
    driver: local
  data_pg_auth:
    driver: local

networks:
  app-net:
    driver: bridge
